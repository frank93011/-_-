from tkinter import *
import random
from unit_test import *

# 將會被許多涵式用到的變數設為global變數

# tkinter 部分
# root：Tk的instance, 整個視窗程式的root
# frame：視窗中的一塊佈局 
# canvas：畫圖區域，用來畫貪吃蛇
root = None
frame = None
canvas = None


# 遊戲區的grid數量
# grid_width：遊戲區有多少grid寬，本例為36
# grid_height：遊戲區有多少gird高，本例為24
grid_width = 0
grid_height = 0

# canvas 畫圖區部分，單位都為pixel
# unit：一個grid有多少px，本例為18
# wall_width：牆壁寬，本例為unit / 3，為6px
# width：遊戲區的寬度有多少px
# height：遊戲區的高度有多少px
# offset：canvas鑲嵌在frame中造成3px的白邊框
unit = 0
wall_width = 0
width = 0
height = 0
offset = 3


def gen_win(u, w, h):
    '''
    step 1: 
        這個函式會做a、b、c、d四個動作
        參數u：讓使用者自訂一個grid有幾個px
        參數w：整個視窗有多少px寬
        參數h：整個視窗有多少px高

        a. 創造主視窗
        b. 透過u, w, h計算unit、wall_width、width、height應該有的值，並設進去
        c. 創造一個Frame instance，存入變數frame，綁定在root底下
        d. 創造一個Canvas instance，存入變數canvas，綁定在frame底下
    '''

    ## 因為要在涵式內設定下列global變數，因此要用global關鍵字
    global grid_width
    global grid_height
    global unit
    global wall_width
    global width
    global height

    ## 因為要在涵式內設定下列global變數，因此要用global關鍵字    
    grid_width = w
    grid_height = h
    unit = u

    ## wall_width為牆壁寬，設為unit的1/3，因為單位為px，所以計算的結果不應為float，必須為int
    wall_width = int(unit/3)

    ## width為視窗的寬度，單位為px
    ## 寬度應為 offset + wall_width + wall_width + unit * grid_width + wall_width + wall_width + offset
    ## height為視窗的高度，單位為px
    ## 高度應為 offset + wall_width + wall_width + unit * grid_height + wall_width + wall_width + offset
    width = unit * grid_width + 4 * wall_width + 2 * offset
    height = unit * grid_height + 4 * wall_width + 2 * offset

    ## 配置root的長寬跟左上角座標
    ## geo_setting為'widthxheight+30+30'的字串
    ## 可將root設為寬度width px，高度為height px的視窗，左上角座標為(30, 30)
    geo_setting = str(width) + "x" + str(height) + "+30+30" 

    global root
    global frame
    global canvas

    ## 創造主視窗，設為root
    root = Tk()

    ## 用geo_setting字串配置主視窗大小
    root.geometry(geo_setting)
    root.title("Snake game")

    ## 創造一個Frame instance，存入變數frame，綁定在root底下
    ## frame寬度設為前面算出來的width，高度設為前面算出來的height
    frame = Frame(master = root, width = width, height = height)

    ## 創造一個Canvas instance，存入變數canvas，綁定在frame底下
    ## canvas的背景色設為'yellow'
    ## frame寬度設為前面算出來的width，高度設為前面算出來的height
    canvas = Canvas(master = frame, bg = 'yellow', width = width - 2 * offset, height = height - 2 * offset)
 
    ## 放置frame跟canvas       
    frame.pack()
    canvas.pack()
    return

def draw_walls():
    '''
    step 2:
        繪製遊戲區的牆壁
        wall1：左方牆
        wall2：下方牆
        wall3：右方牆
        wall4：上方牆
    '''
    ## 由於要用create_rectangle來畫牆，所以要定義好wall1 ~ wall4的左上角跟右下角座標
    ## 左上都用 _x1、_y1，右下都用 _x2、_y2命名
    ## wall_margin: 牆之前的空間，即offset(白邊) + wall_width(黃邊框)
    ## 舉例來說，offset若為3px，wall_width若為6px，則wall_margin為9px
    wall_margin = offset + wall_width

    ## 分別計算wall1 ~ wall4的左上、右下座標
    wall1_x1 = wall_margin
    wall1_y1 = wall_margin
    wall1_x2 = wall1_x1 + (wall_width - 1)
    wall1_y2 = ((height - 1)) - wall_margin

    wall3_x1 = ((width - 1)) - (wall_margin + wall_width - 1)
    wall3_y1 = wall1_y1
    wall3_x2 = ((width - 1)) - wall_margin
    wall3_y2 = wall1_y2
    
    wall2_x1 = wall1_x2 + 1
    wall2_y1 = wall1_y2 - (wall_width - 1)
    wall2_x2 = wall3_x1 - 1
    wall2_y2 = wall1_y2

    wall4_x1 = wall2_x1
    wall4_y1 = wall1_y1
    wall4_x2 = wall2_x2
    wall4_y2 = wall1_y1 + (wall_width - 1)

    ## 將wall1的左上座標(wall1_x1, wall1_y1)、右下座標(wall1_x2, wall1_y2)包成wall1這個list
    ## wall2 ~ wall4也是類似
    wall1 = [(wall1_x1, wall1_y1), (wall1_x2, wall1_y2)]
    wall2 = [(wall2_x1, wall2_y1), (wall2_x2, wall2_y2)]
    wall3 = [(wall3_x1, wall3_y1), (wall3_x2, wall3_y2)]
    wall4 = [(wall4_x1, wall4_y1), (wall4_x2, wall4_y2)]

    ## 將wall1的左上座標(wall1_x1, wall1_y1)、右下座標(wall1_x2, wall1_y2)丟進
    ## canvas.create_rectangle當作參數
    ## *wall1是特殊語法，意思是將wall1裡面所有的東西攤平、展開，所以
    ## canvas.create_rectangle(*wall1, ...) 等價為
    ## canvas.create_rectangle(wall1_x1, wall1_y1, wall1_x2, wall1_y2, ...)
    ## 此外 outline參數指的是長方形的外框，預設是黑色'black'，我們改成藍色'blue'        
    canvas.create_rectangle(*wall1, outline = 'blue', fill = 'blue')
    canvas.create_rectangle(*wall2, outline = 'blue', fill = 'blue')
    canvas.create_rectangle(*wall3, outline = 'blue', fill = 'blue')
    canvas.create_rectangle(*wall4, outline = 'blue', fill = 'blue')
    return

def grid_to_pixel(coor):
    '''
    step 3-1: 
        定義一個grid座標與px座標轉換的涵式，將grid的左上角對應到正確的px座標

        參數coor：代表grid座標的(x座標, y座標)，型別為tuple
        return：grid座標轉換後的左上角px座標，型別為tuple
    '''

    ## 將coor[0], coor[1]分別assign給xgrid, ygrid 以方便計算
    (xgrid, ygrid) = coor

    ## xpx代表x方向的px座標
    ## xgrid = 0 時對應到的xpx為offset(白邊) + 2 * wall_width(黃邊框 + 藍牆)
    ## 當xgrid = 1, 2, 3...時，應該還要加上1*unit, 2*unit, 3*unit，也就是unit * xgrid
    ## ypx以此類推
    xpx = offset + 2 * wall_width + unit * xgrid
    ypx = offset + 2 * wall_width + unit * ygrid
    return (xpx, ypx)

def grid_br_corner(coor_px):
    '''
    step 3-2:
        canvas總是需要2個px座標(分別是左上角、右下角)才能創造了一個rectangle(矩形)。
        我們已經在step 3-1的grid_to_pixel()將grid座標轉換成rectangle的左上角px座標，
        右下角px座標就透過grid_br_corner(coor_px)來完成。

        參數coor_px：grid左上角的px座標，型別為tuple
        return：grid右下角的px座標，型別為tuple
    '''
    
    ## 將coor_px[0], coor_px[1]分別assign給x1px, y1px以方便計算
    (x1px, y1px) = coor_px
    ## 以(x1px, y1px)為grid左上角px座標，若grid右下角px座標為(x2px, y2px)
    ## 若一個grid有unit個px寬，
    ## x2px應為x1px + unit - 1，y2px以此類推
    x2px = x1px + unit - 1
    y2px = y1px + unit - 1
    return (x2px, y2px)
    
# snake_coor：一個global list，用來紀錄每格蛇身的grid座標
# snake_rect：一個global list，用來紀錄蛇身在canvas上的每個rectangle的流水號
snake_coor = list()
snake_rect = list()
def add_body1(coor, from_tail = True):
    '''
    step 3-3:
        當增加一個蛇身grid時，動作如下
        a. 將新的蛇身grid座標轉換成左上角、右下角的pixel座標
        b. 透過canvas.create_rectangle()畫出新蛇身grid
        c. 若新蛇身要加在尾巴，則將grid座標append到snake_coor這個list
        d. 若新蛇身要加在尾巴，則將canvas上新造出來的rectangle流水號append到snake_rect這個list

        e. 若新蛇身要加在頭部，則將grid座標insert到snake_coor最前面
        f. 若新蛇身要加在頭部，則將grid座標insert到snake_coor最前面
        
        參數coor：新蛇身的grid座標，型別為tuple
        參數from_tail：當from_tail為True時，代表要將新蛇身加入頭部
                      當from_tail為True時，代表要將新蛇身加在尾巴
    '''

    ## 由於會改到snake_coor、snake_rect這兩個global的list 因此要加「global」關鍵字    
    global snake_coor
    global snake_rect

    ## 因為要新增蛇身，所以要先準備好新蛇身的左上角、右下角px座標
    ## 好讓canvans可以create_rectangle，因此創造grid_sta、grid_end這兩個變數
    ## 分別代表新蛇身的左上角、右下角px座標
    grid_sta = grid_to_pixel(coor)
    grid_end = grid_br_corner(grid_sta)

    ## 透過fill參數設定蛇身為'orange'，並透過tag參數將所有蛇身都標記為'snake'
    ## 再用grid_rect變數紀錄canvas.create_rectangle()的流水號
    grid_rect = canvas.create_rectangle(*grid_sta, *grid_end, fill = 'orange', tag = 'snake')

    ## 當from_tail為True時，表示要將coor/grid_rect放在snake_coor/snake_rect的最尾端
    ## 否則表示要將coor/grid_rect放在snake_coor/snake_rect的頭部
    if from_tail:
        snake_coor.append(coor)
        snake_rect.append(grid_rect)        
    else:
        snake_coor.insert(0, coor)
        snake_rect.insert(0, grid_rect)
    return

def gen_init_snake(coor):
    '''
    step 3-4: 
        畫出開機狀態的蛇
        參數coor：開機狀態的蛇頭grid座標
    '''

    ## 假設開機狀態蛇身為3個grid，蛇預設前進方向為「向下」
    ## 則先造出(並畫出)出蛇頭，座標為coor或者(xgrid, ygrid)
    ## 接著再造出(並畫出)第二個蛇身，即蛇頭「上方一格」
    ## 接著再造出(並畫出)第三個蛇身，即第二個蛇身的「上方一格」
    (xgrid, ygrid) = coor
    add_body1((xgrid, ygrid))
    add_body1((xgrid, ygrid - 1))
    add_body1((xgrid, ygrid - 2))
    return

# food_coor：一個global tuple，用來紀錄食物的grid座標
# food_rect：一個global int，用來紀錄食物在canvas上的rectangle流水號
food_coor = None
food_rect = None
def gen_food():
    '''
    step 4: 
        隨機產生食物grid座標並畫出食物
    '''
    ## 會使用到global變數grid_width跟grid_height，代表遊戲區的範圍
    ## 雖然不會去改寫這兩個變數的值，但仍使用「global」關鍵字，提醒我們這兩個變數是global的
    global grid_width
    global grid_height  
    ## 由於會改到food_coor、food_rect這兩個global的tuple跟int，因此要加「global」關鍵字
    global food_coor
    global food_rect

    ## 食物的水平方向grid座標x應介於0 ~ grid_width - 1之間
    ## 食物的垂直方向grid座標y應介於0 ~ grid_height - 1之間
    ## 將(x, y)組成tuple代表食物座標，並存於global變數food_coor內
    x = random.randint(0, grid_width - 1)
    y = random.randint(0, grid_height - 1)
    food_coor = (x, y)

    ## 當food_coor重疊於snake_coor內的任何一個元素，就要重新產生一次座標，直到food_coor不重疊於snake_coor
    while food_coor in snake_coor:
            x = random.randint(0, grid_width - 1)
            y = random.randint(0, grid_height - 1)
            food_coor = (x, y)
    else:
        ## 既然while迴圈執行結束，表示這時候的food_coor沒有跟蛇身重疊
        ## 那就可以開始來畫新的食物方格了    

        ## 如果canvas上有食物的方格(即food_rect有值，不為0)，則產生新的食物rectangle之前
        ## 應該要把舊的食物方格清除
        if food_rect:
            canvas.delete(food_rect)

        ## 因為要畫出食物方格，所以要先準備好食物方格的左上角、右下角px座標好讓canvans可以create_rectangle
        ## food_grid_sta、food_grid_end這兩個變數，分別代表食物方格的左上角、右下角px座標
        food_grid_sta = grid_to_pixel(food_coor)
        food_grid_end = grid_br_corner(food_grid_sta)
 
        ## 透過fill參數設定食物為'red'，並透過tag參數將食物的方格標記為'food'
        ## 再用food_rect變數紀錄canvas.create_rectangle()的流水號       
        food_rect = canvas.create_rectangle(*food_grid_sta, *food_grid_end, fill = 'red', tag = 'food')
        return    

def root_event_handler_bind():
    '''
    step 5-1:
        將root視窗，的事件處理函式跟外部事件繫結
    '''
    ## 設定按壓鍵盤的焦點為root widget
    ## 將按壓鍵盤的外部事件'<Key>'跟處理函式keyboard_handler()繫結
    ## 將關閉視窗的外部事件'WM_DELETE_WINDOW'跟處理函式root_exit()繫結
    root.focus_set()
    root.bind('<Key>', keyboard_handler)
    root.protocol("WM_DELETE_WINDOW", root_exit)
    return

def check_change_dir(key):
    '''
        傳入按鍵(其實是傳入按鍵所代表的字串)
        檢查看看蛇是否需要改變前進的方向，內容先擱置，後續再補
    '''
    pass
    return

def keyboard_handler(event):
    '''
    step 5-2-1:
        按壓鍵盤的外部事件處理函式
        檢查所按壓的鍵盤並紀錄按鍵的代表字串
        參數event：event會記錄「按鍵盤」這個事件，內含event.keysym跟event.keycode等內容
    '''

    ## event.keysym是鍵盤對應的字串
    ## 當event.keysym是按鍵「上」、「下」、「左」、「右」其中一個，才處理
    key = ''
    if event.keysym in ['Up', 'Down', 'Left', 'Right']:
        ## 將event.keysym所代表的字串，丟入chack_change()函式，來檢查蛇的前進方向是否需要改變
        key = event.keysym
        check_change_dir(key)

    return

## game_exit：用來標記視窗關閉是否觸發了，當game_exit為True代表視窗的x被點擊，初始狀態為True
game_exit = False
def root_exit():
    '''
    step 5-2-2:
        a. 透過root.destroy()來關閉視窗
        b. 將game_exit這個控制流程的變數設為True
    '''
    ## 由於會改變 game_exit的值，因此要用「global」關鍵字
    ## 透過root.destroy()來關閉視窗
    global game_exit
    game_exit = True
    root.destroy()

    return

## game_over：用來紀錄遊戲是否在game over狀態的變數，當蛇撞牆或撞到自己時，應設為True
##            初始狀態還未發生，應設為True
## draw_game_over_done：用來讓draw_game_over()被呼叫一次的變數，當draw_game_over()被呼叫後
##                      應設為True，所以初始狀態draw_game_over還沒發生，應設為False
## timer_reset：由於迴圈每一回合約為數百微秒，因此在沒有按入方向鍵的情況下
##              設定每60000回合讓蛇前進一格，約略於每0.3秒蛇移動一步
game_over = False
draw_game_over_done = False
timer_reset = 60000#1200
def loop():
    '''
    step 6:
        遊戲控制流程迴圈
        使用計時器來決定畫面多久更新一次
        a. 當任何外部事件(按鍵盤、關視窗)都沒發生，蛇應該要往原來的方向前進
           當「上」「下」「左」「右」被按時，要「馬上」改變蛇的前進方向，而不是等計時器數完才改變
        b. 蛇移動了以後，要作碰撞判斷(檢查是否撞到牆、撞到自己，或撞到食物)
        c. 蛇移動後表示是個新畫面，因此要用canvas.update()來畫出新畫面
    '''
    ## 由於要用到下列global變數，因此使用「global」關鍵字，提醒我們這些變數是global的
    global timer_reset
    global dir_changed
    global game_over

    ## draw_game_over_done：先擱置
    #global draw_game_over_done

    ## 計時器，沒有按入方向鍵的情況下，每次計時器數到60000時，就讓蛇照著目前的行進方向前進一格
    ## 蛇移動後(不管是透過方向鍵移動，或是計時器數到60000而移動)，都應該要歸0重數
    timer = 0

    ## 由於root視窗開啟之後，只要視窗沒有被關閉(視窗的X沒有被按)就不斷執行的迴圈
    ## 只有當視窗被關閉，即game_exit發生，迴圈才結束
    while not game_exit:

        ## 當game_over(蛇撞自己或撞牆)發生時，呼叫draw_game_over()函式
        ## draw_game_over()是負責畫game over畫面的
        if game_over:
            draw_game_over()
            #if not draw_game_over_done:
            #   draw_game_over()
            #    draw_game_over_done = True

        ## 若非game_over狀態(即遊戲進行中)
        ## 則判斷是因為按壓方向鍵導致蛇要改變方向而移動(dir_changed)
        ## 或是方向沒改變，所以等計時器倒數結束蛇才前進(timer == timer_reset)
        elif dir_changed or timer == timer_reset:
            ## 呼叫move()來讓讓蛇移動到下一格
            ## 移動後呼叫check_hit_things()判斷有無撞到東西
            ## 蛇移動到下一格後，應該要讓timer歸0，重數
            ## 蛇移動後，dir_changed應該要設回False，讓下一個按壓方向鍵的事件來決定是否有改變方向的情形            
            move()
            check_hit_things()
            timer = 0
            dir_changed = False

        ## 每次迴圈都透過canvas.update()來更新畫面            
        canvas.update()
        ## 每次迴圈計時器都應該要加1
        timer += 1
    
    return


def draw_game_over():
    pass

## dir_changed：用來判斷蛇行進方向是否改變的變數，當蛇改變方向時，應設為True
##              初始狀態應設為False
## now_dir：用來紀錄現在蛇前進的方向，其內容就是方向鍵的代表字串，由於方向只有「上」、「下」、「左」、「右」
##          因此now_dir的值只有4種，即'Up'、'Down'、'Left'、'Right'分別對應「上」、「下」、「左」、「右」
##          預設開機時蛇向下移動，因此初始值為'Down'
dir_changed = False
now_dir = 'Down'
def check_change_dir(key):
    '''
    step 7:
        檢查方向鍵是否造成蛇改變方向(轉彎)，如果蛇蛇改變方向，就要將dir_changed設為True
        好讓loop()函式的迴圈，可以根據dir_changed的狀態做對應的動作
        key：方向鍵的代表字串，'Up'、'Down'、'Left'、'Right'分別對應「上」、「下」、「左」、「右」
    '''
    ## 使用到global變數now_dir、dir_changed
    global now_dir
    global dir_changed

    ## 方向改變的判斷如下：
    ## a. 方向鍵 != 現在前進的方向
    ## b. 方向鍵跟現在行進方向垂直
    ## 當 a. 跟 b. 同時發生(and)，就表示要改變行進的方向

    ## b.條件判斷式很長，因此用4個bool變數來紀錄這些條件
    change_dir_up = key == 'Up' and (now_dir == 'Left' or now_dir == 'Right')
    change_dir_down = key == 'Down' and (now_dir == 'Left' or now_dir == 'Right')
    change_dir_left = key == 'Left' and (now_dir == 'Up' or now_dir == 'Down')
    change_dir_right = key == 'Right' and (now_dir == 'Up' or now_dir == 'Down')

    ## 當 a. 跟 b. 同時發生(and)，就表示要改變行進的方向
    if key != now_dir and (change_dir_up or change_dir_down or change_dir_left or change_dir_right):
        ## 由於方向改變，因此新的now_dir即為鍵盤所按的方向(所代表的字串)，也就是參數key
        ## 因為前進方向改變，所以dir_changed要設為True        
        now_dir = key
        dir_changed = True
    else:
        ## 否則，dir_changed就設為False代表前進方向不變
        dir_changed = False

    return

## tail_to_grow：用來紀錄移動前蛇的尾巴grid座標，當蛇前進後吃到食物，會在這個位置長出身體
##               因為tail_to_grow會在body_move1()被呼叫時給設定，但卻在step9_1.py的
##               check_hit_things()被呼叫時才拿來用，因此是個global變數
tail_to_grow = None
def body_move1(coor):
    '''
    step 8-1:
        讓蛇身前進一個grid的函式，會做a、b、c、d四個動作
        參數coor：蛇頭的新座標（是個grid座標）

        註：「舊蛇」指移動前的蛇，「新蛇」指移動後的蛇
        a. 舊蛇頭將移動到新座標，並且要畫出新的矩形，因此要在新座標畫出新蛇頭的grid
        b. 紀錄舊蛇的尾巴座標，當舊蛇前進且撞到食物時，新蛇的身體會成長一格，
           長出來的地方就是剛剛記錄的舊尾巴座標
        c. 刪掉舊蛇的尾巴
        d. 舊蛇除蛇頭、尾巴之外，其他蛇身都保持不變.
    '''

    ## 要改寫global變數tail_to_grow因此使用「global」關鍵字
    global tail_to_grow

    ## 當蛇移動時，新蛇頭如同舊蛇在coor的位置長出一個grid，此外，舊蛇尾消失了

    ## 蛇頭將移動到coor，所以要在coor這個位置畫出新蛇頭，我們可以透過add_body1()添加新蛇頭
    ## 當蛇移動時，新的蛇頭是在舊蛇的前面，因此from_tail參數要設為False
    add_body1(coor, from_tail = False)
    ## 記錄舊的蛇尾座標，如果新蛇頭跟食物重疊，表示撞到食物，吃到食物時會在舊蛇尾的位置長出grid
    tail_to_grow = snake_coor[-1] 

    ## 既然紀錄完舊蛇尾座標，就可以將舊蛇尾座標從snake_coor的尾端去除
    ## 接著從canvas裡面將舊蛇尾巴的矩形從畫面中刪掉，因此透過canvas.delete(「舊蛇尾矩形流水號」)
    ## 來刪除「舊蛇尾矩形流水號」所代表的矩形
    ## 最後再將「舊蛇尾矩形流水號」從snake_rect中去除

    del snake_coor[-1]
    canvas.delete(snake_rect[-1])
    del snake_rect[-1]

    return
    
def move():
    '''
    step 8-2:
        當蛇移動一個grid時，根據現在前進的方向now_dir計算出移動後的座標
        並且在畫面上跟著移動到新座標
    '''

    ## 因為要使用到global變數now_dir，所以用global關鍵字
    ## 將蛇頭的x座標、y座標分別assign給headx、heady
    global now_dir
    (headx, heady) = snake_coor[0]

    ## 如果按照「現在前進的方向(變數now_dir)」，算出移動後蛇頭的新位置
    ## 再將蛇頭的新位置當作參數傳給body_move1()函式，即能得到身體移動到新位置的效果
    if now_dir == 'Up':
        body_move1((headx, heady - 1))

    if now_dir == 'Down':
        body_move1((headx, heady + 1))

    if now_dir == 'Left':
        body_move1((headx - 1, heady))

    if now_dir == 'Right':
        body_move1((headx + 1, heady))

    return

def check_hit_things():
    '''
    step 9-1:
        檢查蛇移動之後，有無撞到東西，基本上就是檢查蛇頭有無撞到東西
        a. 當蛇撞到牆、自己、顯示game over畫面 
        b. 當蛇撞到食物，身體要長長一個grid，並產生新的食物
    '''

    ## 當game over的情況發生時，要設定gobal變數game_over，好讓控制流程的loop()能夠根據這個變數
    ## 切換到對應的執行動作
    global game_over

    ## 我們用hit_walls()、hit_boyd()函式來當作判斷是否有撞到牆的依據
    ## 是否有「撞牆」可用hit_walls()來表示
    ## 是否有「撞自己」可用hit_walls()來表示
    ##
    ## 還要用hit_food()函式來當作是否有撞到食物的依據
    ## 是否有「撞食物」可用hit_food()來表示


    ## 當「撞牆」或「撞自己」：將game_over變數設為True(表示要進入game_over狀態了)
    ## 不然如果「撞到食物」：要使用body_grow()長出尾巴，接著用gen_food()產生新的食物
    ## 否則：就維持原狀，不需做任何事情

    if hit_walls() or hit_body():
        game_over = True
    elif hit_food():
        body_grow()
        gen_food()
    else:
        pass

    return

def hit_walls():
    '''
    step 9-2-1:
        判斷蛇頭有無撞到牆
    '''
    ## 蛇頭座標為snake_coor[0]，分別將蛇頭的x座標、y座標assign給headx, heady 以方便計算
    (headx, heady) = snake_coor[0]

    ## 當headx < 0            代表撞到左牆
    ## 當headx >= grid_witdh  代表撞到右牆
    ## 當heady < 0            代表撞到上牆
    ## 當heady >= grid_height 代表撞到下牆
    ##
    ## 當上述4個條件有「任何一個」成立，就表示蛇有撞到牆
    return headx < 0  or headx >= grid_witdh or heady < 0 or heady >= grid_height

def hit_body():
    '''
    step 9-2-2:
        判斷蛇頭有無撞到頭部以外的身體 
    '''
    ## 蛇頭座標為snake_coor[0]
    ## 蛇頭以外的身體為snake_coor[1 : ]可以透過 in 關鍵字來查詢
    ## snake_coor[0]是否有在snake_coor[1 : ]當中，如果有，表示頭有撞到身體
    return snake_coor[0] in snake_coor[1 : ]

def hit_food():
    '''
    step 9-2-3:
        判斷蛇頭有無撞到食物
    '''
    ## 直接判斷蛇頭座標(snake_coor[0])跟食物座標(food_coor)是否相等
    return snake_coor[0] == food_coor

def body_grow():
    '''
    step 9-3-1:
        當蛇頭撞到食物，在tail_to_grow變數所記錄的座標長尾巴
    '''

    ## 透過add_body1(coor, from_tail)可以幫我們長出一個身體
    ## 新長出來的身體就是global 變數tail_to_grow所記錄的座標
    ## 因此只要將tail_to_grow傳入add_body1()即可
    ##
    ## 由於from_tail參數代表從頭長或從尾巴長
    ## 因此要設定from_tail為True會從尾巴長，但因為from_tail的預設值為True，
    ## 因此可以不傳入from_tail參數預設就會從尾巴長
    add_body1(??)
    return


if __name__ == "__main__":
    gen_win(18, 36, 24)
    draw_walls()
    root_event_handler_bind()

    gen_init_snake((0, 2))
    test_case = [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (1, 23), (1, 22), (1, 21), (1, 20), (1, 19), (1, 18), (1, 17), (1, 16), (1, 15), (1, 14), (1, 13), (1, 12), (1, 11), (1, 10), (1, 9), (1, 8), (1, 7), (1, 6), (1, 5), (1, 4), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (3, 23), (3, 22), (3, 21), (3, 20), (3, 19), (3, 18), (3, 17), (3, 16), (3, 15), (3, 14), (3, 13), (3, 12), (3, 11), (3, 10), (3, 9), (3, 8), (3, 7), (3, 6), (3, 5), (3, 4), (3, 3), (3, 2), (3, 1), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (5, 23), (5, 22), (5, 21), (5, 20), (5, 19), (5, 18), (5, 17), (5, 16), (5, 15), (5, 14), (5, 13), (5, 12), (5, 11), (5, 10), (5, 9), (5, 8), (5, 7), (5, 6), (5, 5), (5, 4), (5, 3), (5, 2), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 16), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (7, 23), (7, 22), (7, 21), (7, 20), (7, 19), (7, 18), (7, 17), (7, 16), (7, 15), (7, 14), (7, 13), (7, 12), (7, 11), (7, 10), (7, 9), (7, 8), (7, 7), (7, 6), (7, 5), (7, 4), (7, 3), (7, 2), (7, 1), (7, 0), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (9, 23), (9, 22), (9, 21), (9, 20), (9, 19), (9, 18), (9, 17), (9, 16), (9, 15), (9, 14), (9, 13), (9, 12), (9, 11), (9, 10), (9, 9), (9, 8), (9, 7), (9, 6), (9, 5), (9, 4), (9, 3), (9, 2), (9, 1), (9, 0), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (11, 23), (11, 22), (11, 21), (11, 20), (11, 19), (11, 18), (11, 17), (11, 16), (11, 15), (11, 14), (11, 13), (11, 12), (11, 11), (11, 10), (11, 9), (11, 8), (11, 7), (11, 6), (11, 5), (11, 4), (11, 3), (11, 2), (11, 1), (11, 0), (12, 0), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 12), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (13, 23), (13, 22), (13, 21), (13, 20), (13, 19), (13, 18), (13, 17), (13, 16), (13, 15), (13, 14), (13, 13), (13, 12), (13, 11), (13, 10), (13, 9), (13, 8), (13, 7), (13, 6), (13, 5), (13, 4), (13, 3), (13, 2), (13, 1), (13, 0), (14, 0), (14, 1), (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), (14, 12), (14, 13), (14, 14), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (15, 23), (15, 22), (15, 21), (15, 20), (15, 19), (15, 18), (15, 17), (15, 16), (15, 15), (15, 14), (15, 13), (15, 12), (15, 11), (15, 10), (15, 9), (15, 8), (15, 7), (15, 6), (15, 5), (15, 4), (15, 3), (15, 2), (15, 1), (15, 0), (16, 0), (16, 1), (16, 2), (16, 3), (16, 4), (16, 5), (16, 6), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12), (16, 13), (16, 14), (16, 15), (16, 16), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (17, 23), (17, 22), (17, 21), (17, 20), (17, 19), (17, 18), (17, 17), (17, 16), (17, 15), (17, 14), (17, 13), (17, 12), (17, 11), (17, 10), (17, 9), (17, 8), (17, 7), (17, 6), (17, 5), (17, 4), (17, 3), (17, 2), (17, 1), (17, 0), (18, 0), (18, 1), (18, 2), (18, 3), (18, 4), (18, 5), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (18, 12), (18, 13), (18, 14), (18, 15), (18, 16), (18, 17), (18, 18), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (19, 23), (19, 22), (19, 21), (19, 20), (19, 19), (19, 18), (19, 17), (19, 16), (19, 15), (19, 14), (19, 13), (19, 12), (19, 11), (19, 10), (19, 9), (19, 8), (19, 7), (19, 6), (19, 5), (19, 4), (19, 3), (19, 2), (19, 1), (19, 0), (20, 0), (20, 1), (20, 2), (20, 3), (20, 4), (20, 5), (20, 6), (20, 7), (20, 8), (20, 9), (20, 10), (20, 11), (20, 12), (20, 13), (20, 14), (20, 15), (20, 16), (20, 17), (20, 18), (20, 19), (20, 20), (20, 21), (20, 22), (20, 23), (21, 23), (21, 22), (21, 21), (21, 20), (21, 19), (21, 18), (21, 17), (21, 16), (21, 15), (21, 14), (21, 13), (21, 12), (21, 11), (21, 10), (21, 9), (21, 8), (21, 7), (21, 6), (21, 5), (21, 4), (21, 3), (21, 2), (21, 1), (21, 0), (22, 0), (22, 1), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6), (22, 7), (22, 8), (22, 9), (22, 10), (22, 11), (22, 12), (22, 13), (22, 14), (22, 15), (22, 16), (22, 17), (22, 18), (22, 19), (22, 20), (22, 21), (22, 22), (22, 23), (23, 23), (23, 22), (23, 21), (23, 20), (23, 19), (23, 18), (23, 17), (23, 16), (23, 15), (23, 14), (23, 13), (23, 12), (23, 11), (23, 10), (23, 9), (23, 8), (23, 7), (23, 6), (23, 5), (23, 4), (23, 3), (23, 2), (23, 1), (23, 0), (24, 0), (24, 1), (24, 2), (24, 3), (24, 4), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 10), (24, 11), (24, 12), (24, 13), (24, 14), (24, 15), (24, 16), (24, 17), (24, 18), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23), (25, 23), (25, 22), (25, 21), (25, 20), (25, 19), (25, 18), (25, 17), (25, 16), (25, 15), (25, 14), (25, 13), (25, 12), (25, 11), (25, 10), (25, 9), (25, 8), (25, 7), (25, 6), (25, 5), (25, 4), (25, 3), (25, 2), (25, 1), (25, 0), (26, 0), (26, 1), (26, 2), (26, 3), (26, 4), (26, 5), (26, 6), (26, 7), (26, 8), (26, 9), (26, 10), (26, 11), (26, 12), (26, 13), (26, 14), (26, 15), (26, 16), (26, 17), (26, 18), (26, 19), (26, 20), (26, 21), (26, 22), (26, 23), (27, 23), (27, 22), (27, 21), (27, 20), (27, 19), (27, 18), (27, 17), (27, 16), (27, 15), (27, 14), (27, 13), (27, 12), (27, 11), (27, 10), (27, 9), (27, 8), (27, 7), (27, 6), (27, 5), (27, 4), (27, 3), (27, 2), (27, 1), (27, 0), (28, 0), (28, 1), (28, 2), (28, 3), (28, 4), (28, 5), (28, 6), (28, 7), (28, 8), (28, 9), (28, 10), (28, 11), (28, 12), (28, 13), (28, 14), (28, 15), (28, 16), (28, 17), (28, 18), (28, 19), (28, 20), (28, 21), (28, 22), (28, 23), (29, 23), (29, 22), (29, 21), (29, 20), (29, 19), (29, 18), (29, 17), (29, 16), (29, 15), (29, 14), (29, 13), (29, 12), (29, 11), (29, 10), (29, 9), (29, 8), (29, 7), (29, 6), (29, 5), (29, 4), (29, 3), (29, 2), (29, 1), (29, 0), (30, 0), (30, 1), (30, 2), (30, 3), (30, 4), (30, 5), (30, 6), (30, 7), (30, 8), (30, 9), (30, 10), (30, 11), (30, 12), (30, 13), (30, 14), (30, 15), (30, 16), (30, 17), (30, 18), (30, 19), (30, 20), (30, 21), (30, 22), (30, 23), (31, 23), (31, 22), (31, 21), (31, 20), (31, 19), (31, 18), (31, 17), (31, 16), (31, 15), (31, 14), (31, 13), (31, 12), (31, 11), (31, 10), (31, 9), (31, 8), (31, 7), (31, 6), (31, 5), (31, 4), (31, 3), (31, 2), (31, 1), (31, 0), (32, 0), (32, 1), (32, 2), (32, 3), (32, 4), (32, 5), (32, 6), (32, 7), (32, 8), (32, 9), (32, 10), (32, 11), (32, 12), (32, 13), (32, 14), (32, 15), (32, 16), (32, 17), (32, 18), (32, 19), (32, 20), (32, 21), (32, 22), (32, 23), (33, 23), (33, 22), (33, 21), (33, 20), (33, 19), (33, 18), (33, 17), (33, 16), (33, 15), (33, 14), (33, 13), (33, 12), (33, 11), (33, 10), (33, 9), (33, 8), (33, 7), (33, 6), (33, 5), (33, 4), (33, 3), (33, 2), (33, 1), (33, 0), (34, 0), (34, 1), (34, 2), (34, 3), (34, 4), (34, 5), (34, 6), (34, 7), (34, 8), (34, 9), (34, 10), (34, 11), (34, 12), (34, 13), (34, 14), (34, 15), (34, 16), (34, 17), (34, 18), (34, 19), (34, 20), (34, 21), (34, 22), (34, 23), (35, 23), (35, 22), (35, 21), (35, 20), (35, 19), (35, 18), (35, 17), (35, 16), (35, 15), (35, 14), (35, 13), (35, 12), (35, 11), (35, 10), (35, 9), (35, 8), (35, 7), (35, 6), (35, 5), (35, 4), (35, 3), (35, 2), (35, 1), (35, 0)]
    answer_case = [((0, 1), 6), ((0, 2), 5), ((0, 3), 8), ((0, 4), 10), ((0, 5), 12), ((0, 6), 14), ((0, 7), 16), ((0, 8), 18), ((0, 9), 20), ((0, 10), 22), ((0, 11), 24), ((0, 12), 26), ((0, 13), 28), ((0, 14), 30), ((0, 15), 32), ((0, 16), 34), ((0, 17), 36), ((0, 18), 38), ((0, 19), 40), ((0, 20), 42), ((0, 21), 44), ((0, 22), 46), ((0, 23), 48), ((1, 23), 50), ((1, 22), 52), ((1, 21), 54), ((1, 20), 56), ((1, 19), 58), ((1, 18), 60), ((1, 17), 62), ((1, 16), 64), ((1, 15), 66), ((1, 14), 68), ((1, 13), 70), ((1, 12), 72), ((1, 11), 74), ((1, 10), 76), ((1, 9), 78), ((1, 8), 80), ((1, 7), 82), ((1, 6), 84), ((1, 5), 86), ((1, 4), 88), ((1, 3), 90), ((1, 2), 92), ((1, 1), 94), ((1, 0), 96), ((2, 0), 98), ((2, 1), 100), ((2, 2), 102), ((2, 3), 104), ((2, 4), 106), ((2, 5), 108), ((2, 6), 110), ((2, 7), 112), ((2, 8), 114), ((2, 9), 116), ((2, 10), 118), ((2, 11), 120), ((2, 12), 122), ((2, 13), 124), ((2, 14), 126), ((2, 15), 128), ((2, 16), 130), ((2, 17), 132), ((2, 18), 134), ((2, 19), 136), ((2, 20), 138), ((2, 21), 140), ((2, 22), 142), ((2, 23), 144), ((3, 23), 146), ((3, 22), 148), ((3, 21), 150), ((3, 20), 152), ((3, 19), 154), ((3, 18), 156), ((3, 17), 158), ((3, 16), 160), ((3, 15), 162), ((3, 14), 164), ((3, 13), 166), ((3, 12), 168), ((3, 11), 170), ((3, 10), 172), ((3, 9), 174), ((3, 8), 176), ((3, 7), 178), ((3, 6), 180), ((3, 5), 182), ((3, 4), 184), ((3, 3), 186), ((3, 2), 188), ((3, 1), 190), ((3, 0), 192), ((4, 0), 194), ((4, 1), 196), ((4, 2), 198), ((4, 3), 200), ((4, 4), 202), ((4, 5), 204), ((4, 6), 206), ((4, 7), 208), ((4, 8), 210), ((4, 9), 212), ((4, 10), 214), ((4, 11), 216), ((4, 12), 218), ((4, 13), 220), ((4, 14), 222), ((4, 15), 224), ((4, 16), 226), ((4, 17), 228), ((4, 18), 230), ((4, 19), 232), ((4, 20), 234), ((4, 21), 236), ((4, 22), 238), ((4, 23), 240), ((5, 23), 242), ((5, 22), 244), ((5, 21), 246), ((5, 20), 248), ((5, 19), 250), ((5, 18), 252), ((5, 17), 254), ((5, 16), 256), ((5, 15), 258), ((5, 14), 260), ((5, 13), 262), ((5, 12), 264), ((5, 11), 266), ((5, 10), 268), ((5, 9), 270), ((5, 8), 272), ((5, 7), 274), ((5, 6), 276), ((5, 5), 278), ((5, 4), 280), ((5, 3), 282), ((5, 2), 284), ((5, 1), 286), ((5, 0), 288), ((6, 0), 290), ((6, 1), 292), ((6, 2), 294), ((6, 3), 296), ((6, 4), 298), ((6, 5), 300), ((6, 6), 302), ((6, 7), 304), ((6, 8), 306), ((6, 9), 308), ((6, 10), 310), ((6, 11), 312), ((6, 12), 314), ((6, 13), 316), ((6, 14), 318), ((6, 15), 320), ((6, 16), 322), ((6, 17), 324), ((6, 18), 326), ((6, 19), 328), ((6, 20), 330), ((6, 21), 332), ((6, 22), 334), ((6, 23), 336), ((7, 23), 338), ((7, 22), 340), ((7, 21), 342), ((7, 20), 344), ((7, 19), 346), ((7, 18), 348), ((7, 17), 350), ((7, 16), 352), ((7, 15), 354), ((7, 14), 356), ((7, 13), 358), ((7, 12), 360), ((7, 11), 362), ((7, 10), 364), ((7, 9), 366), ((7, 8), 368), ((7, 7), 370), ((7, 6), 372), ((7, 5), 374), ((7, 4), 376), ((7, 3), 378), ((7, 2), 380), ((7, 1), 382), ((7, 0), 384), ((8, 0), 386), ((8, 1), 388), ((8, 2), 390), ((8, 3), 392), ((8, 4), 394), ((8, 5), 396), ((8, 6), 398), ((8, 7), 400), ((8, 8), 402), ((8, 9), 404), ((8, 10), 406), ((8, 11), 408), ((8, 12), 410), ((8, 13), 412), ((8, 14), 414), ((8, 15), 416), ((8, 16), 418), ((8, 17), 420), ((8, 18), 422), ((8, 19), 424), ((8, 20), 426), ((8, 21), 428), ((8, 22), 430), ((8, 23), 432), ((9, 23), 434), ((9, 22), 436), ((9, 21), 438), ((9, 20), 440), ((9, 19), 442), ((9, 18), 444), ((9, 17), 446), ((9, 16), 448), ((9, 15), 450), ((9, 14), 452), ((9, 13), 454), ((9, 12), 456), ((9, 11), 458), ((9, 10), 460), ((9, 9), 462), ((9, 8), 464), ((9, 7), 466), ((9, 6), 468), ((9, 5), 470), ((9, 4), 472), ((9, 3), 474), ((9, 2), 476), ((9, 1), 478), ((9, 0), 480), ((10, 0), 482), ((10, 1), 484), ((10, 2), 486), ((10, 3), 488), ((10, 4), 490), ((10, 5), 492), ((10, 6), 494), ((10, 7), 496), ((10, 8), 498), ((10, 9), 500), ((10, 10), 502), ((10, 11), 504), ((10, 12), 506), ((10, 13), 508), ((10, 14), 510), ((10, 15), 512), ((10, 16), 514), ((10, 17), 516), ((10, 18), 518), ((10, 19), 520), ((10, 20), 522), ((10, 21), 524), ((10, 22), 526), ((10, 23), 528), ((11, 23), 530), ((11, 22), 532), ((11, 21), 534), ((11, 20), 536), ((11, 19), 538), ((11, 18), 540), ((11, 17), 542), ((11, 16), 544), ((11, 15), 546), ((11, 14), 548), ((11, 13), 550), ((11, 12), 552), ((11, 11), 554), ((11, 10), 556), ((11, 9), 558), ((11, 8), 560), ((11, 7), 562), ((11, 6), 564), ((11, 5), 566), ((11, 4), 568), ((11, 3), 570), ((11, 2), 572), ((11, 1), 574), ((11, 0), 576), ((12, 0), 578), ((12, 1), 580), ((12, 2), 582), ((12, 3), 584), ((12, 4), 586), ((12, 5), 588), ((12, 6), 590), ((12, 7), 592), ((12, 8), 594), ((12, 9), 596), ((12, 10), 598), ((12, 11), 600), ((12, 12), 602), ((12, 13), 604), ((12, 14), 606), ((12, 15), 608), ((12, 16), 610), ((12, 17), 612), ((12, 18), 614), ((12, 19), 616), ((12, 20), 618), ((12, 21), 620), ((12, 22), 622), ((12, 23), 624), ((13, 23), 626), ((13, 22), 628), ((13, 21), 630), ((13, 20), 632), ((13, 19), 634), ((13, 18), 636), ((13, 17), 638), ((13, 16), 640), ((13, 15), 642), ((13, 14), 644), ((13, 13), 646), ((13, 12), 648), ((13, 11), 650), ((13, 10), 652), ((13, 9), 654), ((13, 8), 656), ((13, 7), 658), ((13, 6), 660), ((13, 5), 662), ((13, 4), 664), ((13, 3), 666), ((13, 2), 668), ((13, 1), 670), ((13, 0), 672), ((14, 0), 674), ((14, 1), 676), ((14, 2), 678), ((14, 3), 680), ((14, 4), 682), ((14, 5), 684), ((14, 6), 686), ((14, 7), 688), ((14, 8), 690), ((14, 9), 692), ((14, 10), 694), ((14, 11), 696), ((14, 12), 698), ((14, 13), 700), ((14, 14), 702), ((14, 15), 704), ((14, 16), 706), ((14, 17), 708), ((14, 18), 710), ((14, 19), 712), ((14, 20), 714), ((14, 21), 716), ((14, 22), 718), ((14, 23), 720), ((15, 23), 722), ((15, 22), 724), ((15, 21), 726), ((15, 20), 728), ((15, 19), 730), ((15, 18), 732), ((15, 17), 734), ((15, 16), 736), ((15, 15), 738), ((15, 14), 740), ((15, 13), 742), ((15, 12), 744), ((15, 11), 746), ((15, 10), 748), ((15, 9), 750), ((15, 8), 752), ((15, 7), 754), ((15, 6), 756), ((15, 5), 758), ((15, 4), 760), ((15, 3), 762), ((15, 2), 764), ((15, 1), 766), ((15, 0), 768), ((16, 0), 770), ((16, 1), 772), ((16, 2), 774), ((16, 3), 776), ((16, 4), 778), ((16, 5), 780), ((16, 6), 782), ((16, 7), 784), ((16, 8), 786), ((16, 9), 788), ((16, 10), 790), ((16, 11), 792), ((16, 12), 794), ((16, 13), 796), ((16, 14), 798), ((16, 15), 800), ((16, 16), 802), ((16, 17), 804), ((16, 18), 806), ((16, 19), 808), ((16, 20), 810), ((16, 21), 812), ((16, 22), 814), ((16, 23), 816), ((17, 23), 818), ((17, 22), 820), ((17, 21), 822), ((17, 20), 824), ((17, 19), 826), ((17, 18), 828), ((17, 17), 830), ((17, 16), 832), ((17, 15), 834), ((17, 14), 836), ((17, 13), 838), ((17, 12), 840), ((17, 11), 842), ((17, 10), 844), ((17, 9), 846), ((17, 8), 848), ((17, 7), 850), ((17, 6), 852), ((17, 5), 854), ((17, 4), 856), ((17, 3), 858), ((17, 2), 860), ((17, 1), 862), ((17, 0), 864), ((18, 0), 866), ((18, 1), 868), ((18, 2), 870), ((18, 3), 872), ((18, 4), 874), ((18, 5), 876), ((18, 6), 878), ((18, 7), 880), ((18, 8), 882), ((18, 9), 884), ((18, 10), 886), ((18, 11), 888), ((18, 12), 890), ((18, 13), 892), ((18, 14), 894), ((18, 15), 896), ((18, 16), 898), ((18, 17), 900), ((18, 18), 902), ((18, 19), 904), ((18, 20), 906), ((18, 21), 908), ((18, 22), 910), ((18, 23), 912), ((19, 23), 914), ((19, 22), 916), ((19, 21), 918), ((19, 20), 920), ((19, 19), 922), ((19, 18), 924), ((19, 17), 926), ((19, 16), 928), ((19, 15), 930), ((19, 14), 932), ((19, 13), 934), ((19, 12), 936), ((19, 11), 938), ((19, 10), 940), ((19, 9), 942), ((19, 8), 944), ((19, 7), 946), ((19, 6), 948), ((19, 5), 950), ((19, 4), 952), ((19, 3), 954), ((19, 2), 956), ((19, 1), 958), ((19, 0), 960), ((20, 0), 962), ((20, 1), 964), ((20, 2), 966), ((20, 3), 968), ((20, 4), 970), ((20, 5), 972), ((20, 6), 974), ((20, 7), 976), ((20, 8), 978), ((20, 9), 980), ((20, 10), 982), ((20, 11), 984), ((20, 12), 986), ((20, 13), 988), ((20, 14), 990), ((20, 15), 992), ((20, 16), 994), ((20, 17), 996), ((20, 18), 998), ((20, 19), 1000), ((20, 20), 1002), ((20, 21), 1004), ((20, 22), 1006), ((20, 23), 1008), ((21, 23), 1010), ((21, 22), 1012), ((21, 21), 1014), ((21, 20), 1016), ((21, 19), 1018), ((21, 18), 1020), ((21, 17), 1022), ((21, 16), 1024), ((21, 15), 1026), ((21, 14), 1028), ((21, 13), 1030), ((21, 12), 1032), ((21, 11), 1034), ((21, 10), 1036), ((21, 9), 1038), ((21, 8), 1040), ((21, 7), 1042), ((21, 6), 1044), ((21, 5), 1046), ((21, 4), 1048), ((21, 3), 1050), ((21, 2), 1052), ((21, 1), 1054), ((21, 0), 1056), ((22, 0), 1058), ((22, 1), 1060), ((22, 2), 1062), ((22, 3), 1064), ((22, 4), 1066), ((22, 5), 1068), ((22, 6), 1070), ((22, 7), 1072), ((22, 8), 1074), ((22, 9), 1076), ((22, 10), 1078), ((22, 11), 1080), ((22, 12), 1082), ((22, 13), 1084), ((22, 14), 1086), ((22, 15), 1088), ((22, 16), 1090), ((22, 17), 1092), ((22, 18), 1094), ((22, 19), 1096), ((22, 20), 1098), ((22, 21), 1100), ((22, 22), 1102), ((22, 23), 1104), ((23, 23), 1106), ((23, 22), 1108), ((23, 21), 1110), ((23, 20), 1112), ((23, 19), 1114), ((23, 18), 1116), ((23, 17), 1118), ((23, 16), 1120), ((23, 15), 1122), ((23, 14), 1124), ((23, 13), 1126), ((23, 12), 1128), ((23, 11), 1130), ((23, 10), 1132), ((23, 9), 1134), ((23, 8), 1136), ((23, 7), 1138), ((23, 6), 1140), ((23, 5), 1142), ((23, 4), 1144), ((23, 3), 1146), ((23, 2), 1148), ((23, 1), 1150), ((23, 0), 1152), ((24, 0), 1154), ((24, 1), 1156), ((24, 2), 1158), ((24, 3), 1160), ((24, 4), 1162), ((24, 5), 1164), ((24, 6), 1166), ((24, 7), 1168), ((24, 8), 1170), ((24, 9), 1172), ((24, 10), 1174), ((24, 11), 1176), ((24, 12), 1178), ((24, 13), 1180), ((24, 14), 1182), ((24, 15), 1184), ((24, 16), 1186), ((24, 17), 1188), ((24, 18), 1190), ((24, 19), 1192), ((24, 20), 1194), ((24, 21), 1196), ((24, 22), 1198), ((24, 23), 1200), ((25, 23), 1202), ((25, 22), 1204), ((25, 21), 1206), ((25, 20), 1208), ((25, 19), 1210), ((25, 18), 1212), ((25, 17), 1214), ((25, 16), 1216), ((25, 15), 1218), ((25, 14), 1220), ((25, 13), 1222), ((25, 12), 1224), ((25, 11), 1226), ((25, 10), 1228), ((25, 9), 1230), ((25, 8), 1232), ((25, 7), 1234), ((25, 6), 1236), ((25, 5), 1238), ((25, 4), 1240), ((25, 3), 1242), ((25, 2), 1244), ((25, 1), 1246), ((25, 0), 1248), ((26, 0), 1250), ((26, 1), 1252), ((26, 2), 1254), ((26, 3), 1256), ((26, 4), 1258), ((26, 5), 1260), ((26, 6), 1262), ((26, 7), 1264), ((26, 8), 1266), ((26, 9), 1268), ((26, 10), 1270), ((26, 11), 1272), ((26, 12), 1274), ((26, 13), 1276), ((26, 14), 1278), ((26, 15), 1280), ((26, 16), 1282), ((26, 17), 1284), ((26, 18), 1286), ((26, 19), 1288), ((26, 20), 1290), ((26, 21), 1292), ((26, 22), 1294), ((26, 23), 1296), ((27, 23), 1298), ((27, 22), 1300), ((27, 21), 1302), ((27, 20), 1304), ((27, 19), 1306), ((27, 18), 1308), ((27, 17), 1310), ((27, 16), 1312), ((27, 15), 1314), ((27, 14), 1316), ((27, 13), 1318), ((27, 12), 1320), ((27, 11), 1322), ((27, 10), 1324), ((27, 9), 1326), ((27, 8), 1328), ((27, 7), 1330), ((27, 6), 1332), ((27, 5), 1334), ((27, 4), 1336), ((27, 3), 1338), ((27, 2), 1340), ((27, 1), 1342), ((27, 0), 1344), ((28, 0), 1346), ((28, 1), 1348), ((28, 2), 1350), ((28, 3), 1352), ((28, 4), 1354), ((28, 5), 1356), ((28, 6), 1358), ((28, 7), 1360), ((28, 8), 1362), ((28, 9), 1364), ((28, 10), 1366), ((28, 11), 1368), ((28, 12), 1370), ((28, 13), 1372), ((28, 14), 1374), ((28, 15), 1376), ((28, 16), 1378), ((28, 17), 1380), ((28, 18), 1382), ((28, 19), 1384), ((28, 20), 1386), ((28, 21), 1388), ((28, 22), 1390), ((28, 23), 1392), ((29, 23), 1394), ((29, 22), 1396), ((29, 21), 1398), ((29, 20), 1400), ((29, 19), 1402), ((29, 18), 1404), ((29, 17), 1406), ((29, 16), 1408), ((29, 15), 1410), ((29, 14), 1412), ((29, 13), 1414), ((29, 12), 1416), ((29, 11), 1418), ((29, 10), 1420), ((29, 9), 1422), ((29, 8), 1424), ((29, 7), 1426), ((29, 6), 1428), ((29, 5), 1430), ((29, 4), 1432), ((29, 3), 1434), ((29, 2), 1436), ((29, 1), 1438), ((29, 0), 1440), ((30, 0), 1442), ((30, 1), 1444), ((30, 2), 1446), ((30, 3), 1448), ((30, 4), 1450), ((30, 5), 1452), ((30, 6), 1454), ((30, 7), 1456), ((30, 8), 1458), ((30, 9), 1460), ((30, 10), 1462), ((30, 11), 1464), ((30, 12), 1466), ((30, 13), 1468), ((30, 14), 1470), ((30, 15), 1472), ((30, 16), 1474), ((30, 17), 1476), ((30, 18), 1478), ((30, 19), 1480), ((30, 20), 1482), ((30, 21), 1484), ((30, 22), 1486), ((30, 23), 1488), ((31, 23), 1490), ((31, 22), 1492), ((31, 21), 1494), ((31, 20), 1496), ((31, 19), 1498), ((31, 18), 1500), ((31, 17), 1502), ((31, 16), 1504), ((31, 15), 1506), ((31, 14), 1508), ((31, 13), 1510), ((31, 12), 1512), ((31, 11), 1514), ((31, 10), 1516), ((31, 9), 1518), ((31, 8), 1520), ((31, 7), 1522), ((31, 6), 1524), ((31, 5), 1526), ((31, 4), 1528), ((31, 3), 1530), ((31, 2), 1532), ((31, 1), 1534), ((31, 0), 1536), ((32, 0), 1538), ((32, 1), 1540), ((32, 2), 1542), ((32, 3), 1544), ((32, 4), 1546), ((32, 5), 1548), ((32, 6), 1550), ((32, 7), 1552), ((32, 8), 1554), ((32, 9), 1556), ((32, 10), 1558), ((32, 11), 1560), ((32, 12), 1562), ((32, 13), 1564), ((32, 14), 1566), ((32, 15), 1568), ((32, 16), 1570), ((32, 17), 1572), ((32, 18), 1574), ((32, 19), 1576), ((32, 20), 1578), ((32, 21), 1580), ((32, 22), 1582), ((32, 23), 1584), ((33, 23), 1586), ((33, 22), 1588), ((33, 21), 1590), ((33, 20), 1592), ((33, 19), 1594), ((33, 18), 1596), ((33, 17), 1598), ((33, 16), 1600), ((33, 15), 1602), ((33, 14), 1604), ((33, 13), 1606), ((33, 12), 1608), ((33, 11), 1610), ((33, 10), 1612), ((33, 9), 1614), ((33, 8), 1616), ((33, 7), 1618), ((33, 6), 1620), ((33, 5), 1622), ((33, 4), 1624), ((33, 3), 1626), ((33, 2), 1628), ((33, 1), 1630), ((33, 0), 1632), ((34, 0), 1634), ((34, 1), 1636), ((34, 2), 1638), ((34, 3), 1640), ((34, 4), 1642), ((34, 5), 1644), ((34, 6), 1646), ((34, 7), 1648), ((34, 8), 1650), ((34, 9), 1652), ((34, 10), 1654), ((34, 11), 1656), ((34, 12), 1658), ((34, 13), 1660), ((34, 14), 1662), ((34, 15), 1664), ((34, 16), 1666), ((34, 17), 1668), ((34, 18), 1670), ((34, 19), 1672), ((34, 20), 1674), ((34, 21), 1676), ((34, 22), 1678), ((34, 23), 1680), ((35, 23), 1682), ((35, 22), 1684), ((35, 21), 1686), ((35, 20), 1688), ((35, 19), 1690), ((35, 18), 1692), ((35, 17), 1694), ((35, 16), 1696), ((35, 15), 1698), ((35, 14), 1700), ((35, 13), 1702), ((35, 12), 1704), ((35, 11), 1706), ((35, 10), 1708), ((35, 9), 1710), ((35, 8), 1712), ((35, 7), 1714), ((35, 6), 1716), ((35, 5), 1718), ((35, 4), 1720), ((35, 3), 1722), ((35, 2), 1724)] 
    def test_body_grow(coor):
        body_move1(coor)
        body_grow()
        canvas.update()
        
        canvas.delete(snake_rect[-1])
        del snake_coor[-1]
        del snake_rect[-1]
        canvas.update()
        return (snake_coor[-1], snake_rect[-1])

    unit_test(test_body_grow, test_case, answer_case)






